1. MySQL 환경 설정(도커 사용)
    1) 도커 설치: 컨테이너 기반으로 독립적인 MySQL 환경을 구축
    2) MySQL 컨테이너 실행: lsof -i:3306 명령어로 3306 포트의 사용 여부를 확인후, 다음 명령어를 실행하여 MySQL 8 버전의 컨테이너를 실행
        docker run --name mydb -e MYSQL_ROOT_PASSWORD=1234 -d -p 3306:3306 mysql:8
        -e: root 계정의 비밀번호를 1234로 설정
        -d: 백그라운드에서 컨테이너를 실행
        -p: 호스트(컴퓨터)의 3306 포트와 컨테이너 내부의 3306 포트를 연결
    3) 데이터베이스 생성: MySQL에 접속하여 CREATE DATABASE FastAPIProject; 명령어로 FastAPI 프로젝트가 사용할 데이터베이스를 생성

    4) pycharm으로 데이터 베이스 연결
        Docker desktop이나 orb stack 에서 데이터베이스가 켜진것을 확인했다면 SELECT VERSION(); 으로 연결 / 후 major가 8로 시작한다면 성공

2. Tortoise-ORM
    Tortoise-ORM은 python객체와 데이터베이스 테이블을 매핑해주는 비동기(async) 라이브러리이다.
        주요 역할
            모델 선언: BaseModel을 상속받는 클래스를 정의하여 데이터베이스의 테이블을 파이썬 코드로 표현
            CRUD 연산: QL 쿼리를 직접 작성하지 않고, 파이썬 객체의 메서드를 사용하여 데이터를 생성(Create), 조회(Read), 수정(Update), 삭제(Delete)할 수 있다.
            비동기 지원: FastAPI와 같은 비동기 프레임워크와 완벽하게 통합되도록 설계되어 있어, 데이터베이스 작업 시 I/O(입출력) 블로킹 없이 효율적으로 처리할 수 있다.
        특징
            Django ORM과 유사: 그나마 이해 잘 안되던 강의에서 장점이라고 들었던 문구 ㅋㅋ
                Django ORM 사용 경험이 있다면 쉽게 적응할 수 있도록 설계되었고 모델 선언 방식이나 쿼리셋(QuerySet) 사용법이 매우 비슷하다.
            커넥션 풀: : 데이터베이스 연결을 매번 새로 맺는 대신, 미리 정해진 개수(최대 maxsize)의 연결을 풀(pool)에 만들어두고 재활용하여 데이터베이스 통신 효율을 높인다.

3. Aerich
    Tortoise-ORM의 데이터베이스 마이그레이션(Migration)도구

    주요 역할
        스키마 버전 관리: 개발 과정에서 모델(테이블)을 수정, 추가, 삭제할 때마다 그 변경 내역을 코드로 기록
        aerich init: 마이그레이션 시스템 처음으로 초기화
        aerich migrate: 모델의 변경 사항을 감지하여 새로운 마이그레이션 파일 생성
        aerich upgrade: 생성된 마이그레이션 파일을 데이터베이스에 적용하여 실제 스키마를 업데이트
        aerich downgrade: 이전 적용했던 마이그레이션을 롤백(취소)하는 기능
    특징
        자동 변경 감지: aerich migrate 명령어를 실행하면, 모델의 변경 사항을 자동으로 감지하여 SQL 스크립트를 생성
        안전한 스키마 변경: 마이그레이션 파일을 통해 데이터베이스 변경 이력을 관리하므로, 여러 개발자가 협업할 때나 프로덕션 환경에 배포할 때 안전하고 일관된 데이터베이스 스키마를 유지
        SQLAlchemy의 Alembic과 유사: QLAlchemy를 사용해본 경험이 있다면 Alembic과 비슷한 역할을 한다고 이해하면 된다.


4. 테스트 환경 조성
    목표: FastAPI 애플리케이션의 테스트를 비동기적으로, 그리고 데이터베이스와 연동하여 안정적으로 수행할 수 있는 환경을 구축
    필요 라이브러리 설치
        httpx: 비동기 테스트를 위해 FastAPI와 함께 사용되는 클라이언트 라이브러리. FastAPI 테스트 클라이언트는 httpx를 기반으로 작동하므로 설치가 필수적이다.
        pytest: Python의 대표적인 테스트 프레임워크
        pytest-asyncio: pytest에서 비동기 코드를 테스트할 수 있도록 지원하는 플러그인
    테스트 설정 파일(conftest.py)
        conftest.py는 pytest가 테스트를 실행하기 전에 자동으로 불러오는 설정 파일이다.

5. CI(지속적 통합) 조정
    목표: CI/CD 파이프라인(예: GitHub Actions, GitLab CI)에서 코드를 테스트할 때, 데이터베이스가 없어 발생하는 오류를 해결하고 안정적인 테스트 환경을 구축
    문제점: CI 환경은 클린 상태(깨끗한 가상 환경)에서 시작하기 때문에, 테스트를 실행할 때 데이터베이스 서버가 존재하지 않아 연결 오류가 발생한다.
    해결 방법
        CI 스크립트에 MySQL 설치 구문 추가
            CI 워크플로우 파일(예: .github/workflows/ci.yml)에 MySQL을 설치하고 실행하는 스크립트를 추가. 이 스크립트를 통해 CI 환경에 임시로 MySQL 컨테이너를 띄워 테스트를 진행할 수 있다.

        환경 변수 사용: CI 환경에서 데이터베이스 연결 정보를 안전하게 관리하기 위해 ENV 블록의 환경 변수를 사용
            .env 파일에 있는 민감한 정보(비밀번호, 사용자 이름 등)를 CI 설정 파일에 직접 노출하지 않고, 환경 변수로 주입
            이를 통해 보안을 강화하고, 테스트 스크립트가 로컬 환경과 동일하게 동작할 수 있게 한디.

            예를 들어, MYSQL_PASSWORD와 같은 변수를 CI/CD 플랫폼의 Secret(비밀 변수)으로 설정하고,
            CI 워크플로우에서 해당 변수를 읽어와 테스트 스크립트에 넘긴다.


