1. Orjson :
    1) Orjson이란?
        Python에서 JSON 데이터를 직렬화(Serialize)하거나 역직렬화(Deserialize)하는 데 사용되는 초고속 라이브러리이다.
        C 언어로 구현되어 있어, 내장된 json 모듈이나 다른 라이브러리보다 훨씬 빠른 성능을 자랑합니다.

    2) 장점
        압도적인 속도: JSON 처리 속도가 중요한 웹 API나 데이터 처리 작업에 매우 유용
        쉬운 사용법: 기본적인 사용법은 표준 json 모듈과 유사하다.

2. Frozen
    1) Frozen이란?
        파이썬에서 Frozen은 객체의 상태를 변경할 수 없게 만드는 개념이다. 한번 생성된 후에는 내부의 값(속성)을 수정할 수 없다.
        예시) frozenset(변경 불가능한 집합), @dataclasses.dataclass(frozen=True) (불변 데이터 클래스)

    2) 그래서 이게 왜 중요한데?
        안정성: 실수로 객체 내부 데이터를 변경하는 것을 방지하여 코드의 안정성을 높인다.
        해시 가능(Hashable): 불변 객체는 해시 가능(Hashable)하므로 딕셔너리의 키로 사용하거나 집합(set)의 원소로 추가할 수 있다.

3. Decorator
    1) Decorator란?
          함수나 클래스에 기능을 추가하거나 수정하기 위해 사용되는 문법, @ 기호를 사용하여 함수 정의 위에 붙여 사용한다.
          마치 함수를 "포장하는" 역할을 하여, 기존 코드를 변경하지 않고도 로깅, 성능 측정, 권한 확인 등의 기능을 쉽게 추가 가능
          예시)
            def my_decorator(func):
                def wrapper():
                    print("함수 실행 전!")
                    func()
                    print("함수 실행 후!")
                return wrapper

            @my_decorator
            def say_hello():
                print("Hello!")

            say_hello()
            # 출력 결과:
            # 함수 실행 전!
            # Hello!
            # 함수 실행 후!

4. Orjson
    1) Orjson이란?
        Python에서 JSON 데이터를 직렬화(Serialize)하거나 역직렬화(Deserialize)하는 데 사용되는 초고속 라이브러리
        C 언어로 구현되어 있어, 내장된 json 모듈이나 다른 라이브러리보다 훨씬 빠른 성능을 자랑한다.

    2) 주요 장점
        압도적인 속도: JSON 처리 속도가 중요한 웹 API나 데이터 처리 작업에 매우 유용하다.
        쉬운 사용법: 기본적인 사용법은 표준 json 모듈과 유사

5. Final
    1) Final이란?
        Python 3.8부터 typing 모듈에 추가된 타입 힌트이다.
        변수에 Final을 붙이면 해당 변수에 다른 값을 재할당할 수 없도록 만든다.

    2) Final과 Immutable의 차이점
        Final은 변수 바인딩(재할당)을 막는 데 중점
            예시) name: Final[str] = "Sungyeon"
                 이 변수에 "Jack"을 재할당하는 것은 불가능
                 하지만 final로 선언된 변수가 mutable 객체(예: list)를 가리키고 있다면, 그 객체 내부 값은 변경 가능
                    예시) my_list: Final[list] = [1, 2] / my_list.append(3)는 가능
        Immutable은 객체 자체의 내용 변경을 막는 개념이다.
            예시) 튜플 (1, 2, 3)은 불변, a_tuple[0] = 5 이런식으로 내부 요소 변경 불가

    <정리>
        Final은 "변수를 잠그는 것" / Immutable은 "객체를 잠그는 것"

6. 디버깅의 중요성
    1) 디버깅이란?
        코드에서 예상치 못한 동작이나 오류(버그)를 찾아내고 수정하는 과정

    2) 그래서 왜 중요하냐고
        문제 해결: 버그를 신속하게 찾아내어 프로그램을 안정적으로 만듬
        코드 이해: 디버거를 사용하면 코드의 흐름을 단계별로 추적할 수 있어, 복잡한 로직을 더 깊이 이해하는데 도움이 된다.
        개발 생산성 향상: 버그를 방치하면 나중에 더 큰 문제를 초래할 염려가 있어 초가에 디버깅 하는게 장기적으로 효율적


7. 결정론적(Deterministic) - 이해가 잘 안가서 GPT 사용
    1) 결정론적이란?
        어떤 시스템이나 알고리즘이 항상 동일한 입력에 대해 항상 동일한 출력을 내는 성질을 말합니다.

    2) 파이썬에서의 예시:
        random 모듈은 기본적으로 비결정적이다. 하지만 random.seed()를 사용하면 결정론적으로 만들 수 있습니다.
        예시: random.seed(42)를 설정하면, 같은 코드를 여러 번 실행해도 항상 동일한 무작위 결과가 나옵니다.

    3) 그래서 왜 중요한데?
        테스트 용이성: 테스트 코드를 작성할 때, 결정론적인 동작을 보장하면 테스트의 신뢰성을 높일 수 있다.
        예측 가능성: 시스템의 동작을 예측할 수 있으므로, 디버깅과 유지보수가 쉬워진다.


8. sqids
    1) sqids란?
        숫자열(예: [123, 456])을 짧고 고유하며 읽기 쉬운 문자열(예: "86F0E")로 인코딩하는 라이브러리
        UUID나 Base62와는 다르게, 여러 개의 정수를 하나의 문자열로 인코딩할 수 있다는 특징이 있다.

    2) 주요 용도는?
        URL 단축: 긴 URL을 짧게 만든다.
        고유 식별자 생성: 데이터베이스의 여러 ID(예: 유저ID, 게시글ID)를 하나의 짧은 문자열로 결합하여 표현.
        인간 친화적: Base62와 달리 소문자/대문자/숫자를 섞어 사람이 읽기 쉽게 만들어 준다.

